<?php

$(macro) {
    $(
        // "as alias" due to https://github.com/marcioAlmada/yay/issues/56
        classTrait() as alias
    )
} >> {
    [
        $(alias ... {
            $(classTraitNames ... {
                $$(stringify($(classTraitName))),
            })
            $(classTraitBody ? {
                $(classTraitBody ... {
                    $(classTraitAliases ... {
                        $(classTraitAlias ... {
                            $$(stringify($(classTraitAliasLeft))),

                            $(classTraitAliasInsteadOf ? {
                                'insteadof',
                            })

                            $(classTraitAliasAs ? {
                                'as',
                                $(classTraitAliasAs ... {
                                    $(classTraitVisibilityModifiers ? {
                                        $(classTraitVisibilityModifiers ...(,) {
                                            $$(stringify($(classTraitVisibilityModifier)))
                                        }) ,
                                    })
                                })
                            })

                            $$(stringify($(classTraitAliasRight))),
                        })
                    })
                })
            })
            $(classTraitBody ! {
                'no body',
            })
        })
    ]
}

return [
    use \Foo,
    use Foo, Bar, Foo\Bar\Baz,
    use Foo {
        bar as baz
    },
    use Foo {
        bar as baz;
    },
    use Foo {
        bar as protected baz;
    },
    use Foo, Bar {
        Bar::baz insteadof Foo::baz;
    },
    use Foo, Bar {
        Bar::baz insteadof Foo::baz;
        Foo::bar as public boo;
    }
];
